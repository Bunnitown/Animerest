// Importando bibliotecas.
import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';
import { View, Alert, TouchableOpacity } from 'react-native';
import { StackActions } from '@react-navigation/native';
import * as SecureStore from 'expo-secure-store';
import { Icon } from 'react-native-elements';
import { useEffect } from 'react';
import './Globals.js';

import * as MediaLibrary from 'expo-media-library';
import * as Permissions from 'expo-permissions';
import * as FileSystem from 'expo-file-system';

// Importando componentes.
import Main from './components/Main';
import Picture from './components/Picture';

// Definindo componente.
const Stack = createStackNavigator();
const App = () => {
  useEffect(() => {
    const getUsername = async () => {
      const response = await SecureStore.getItemAsync('username');
      if (response && response.trim().length > 0) global.username = response;
      else SecureStore.setItemAsync('username', global.username);
    };

    getUsername();
  }, []);

  const downloadFile = (uri: string) => {
    const fileName =
      Math.floor(Math.random() * 8999999999) + 1000000000 + '.png';
    let fileUri = FileSystem.documentDirectory + fileName;
    FileSystem.downloadAsync(uri, fileUri)
      .then(({ uri }) => saveFile(uri, fileName))
      .catch((e) => {
        console.error('ERRO: ' + e);
        Alert.alert('Downloading', 'Unable to download.');
      });
  };

  const saveFile = async (fileUri: string, fileName: string) => {
    const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);
    if (status === 'granted') {
      const asset = await MediaLibrary.createAssetAsync(fileUri);
      await MediaLibrary.createAlbumAsync('Download', asset, false);
      Alert.alert('Downloading', 'Downloaded file: ' + fileName);
    } else Alert.alert('Downloading', 'Unable to download.');
  };

  return (
    <NavigationContainer>
      <Stack.Navigator
        initialRouteName="Main"
        screenOptions={({ navigation, route }) => ({
          title: global.header_title,
          headerTintColor: global.header_tintColor,
          headerStyle: {
            backgroundColor: global.header_backgroundColor,
            shadowOpacity: 0,
            elevation: 0,
          },
          headerLeft: () =>
            route.name != 'Main' && (
              <TouchableOpacity
                style={{ marginLeft: global.screen_width / 42 }}
                onPress={() => navigation.pop()}>
                <Icon
                  name="keyboard-backspace"
                  size={global.screen_width / 20}
                  color={global.header_iconColor}
                />
              </TouchableOpacity>
            ),
          headerRight: () =>
            route.name != 'Picture' ? (
              <View
                style={{
                  flexDirection: 'row',
                  marginRight: global.screen_width / 42,
                }}>
                <TouchableOpacity
                  style={{ marginRight: global.screen_width / 42 }}
                  onPress={() =>
                    navigation.dispatch(StackActions.replace(route.name))
                  }>
                  <Icon
                    name="cached"
                    size={global.screen_width / 20}
                    color={global.header_iconColor}
                  />
                </TouchableOpacity>
                <TouchableOpacity
                  onPress={() =>
                    Alert.alert(
                      'Copyright Â©',
                      'Application created by Bunnitown\n\nIcon created by Freepik - Flaticon\n\nPictures generated by Waifu.pics'
                    )
                  }>
                  <Icon
                    name="verified-user"
                    size={global.screen_width / 20}
                    color={global.header_iconColor}
                  />
                </TouchableOpacity>
              </View>
            ) : (
              <TouchableOpacity
                style={{ marginRight: global.screen_width / 42 }}
                onPress={() => {
                  if (global.picture.trim().length == 0)
                    Alert.alert('Downloading', 'Unable to download.');
                  else downloadFile(global.picture);
                }}>
                <Icon
                  name="file-download"
                  size={global.screen_width / 20}
                  color={global.header_iconColor}
                />
              </TouchableOpacity>
            ),
        })}>
        <Stack.Screen name="Main" component={Main} />
        <Stack.Screen name="Picture" component={Picture} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

// Exportando componente.
export default App;
